/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.LogisticsAssignCenter;

import Business.Dao.CourierOrder;
import Business.Dao.CourierOrderList;
import Business.Dao.Order;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.LogisticsEnterprise;
import Business.Network.Network;
import Business.Organization.AssignCenterOrganization;
import Business.Organization.Organization;
import Business.Role.AssignRole;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AssignWorkRequest;
import Business.WorkQueue.CreateCurorderWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zlt1997
 */
public class AssignWorkAreaJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private AssignCenterOrganization assignCenterOrganization;
    private CourierOrderList courierOrderDirectory;
    private EcoSystem business;
    private Network network;
    private AssignRole role;
    /**
     * Creates new form AssignWorkAreaJPanel
     */

    public AssignWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.assignCenterOrganization=(AssignCenterOrganization)organization;
        this.business=business;
        this.role=(AssignRole)account.getRole();
        this.courierOrderDirectory=assignCenterOrganization.getCourierOrderList();
        this.network=business.searchNetwork("success");
        populateTable();
        populateFinishTable();
    }
    
   /* public void Allorders()
    {   
        Order order=new Order();
        for (WorkRequest workRequest : assignCenterOrganization.getWorkQueue().getWorkRequestList()) {
            if (workRequest instanceof CreateCurorderWorkRequest) {
                order=((CreateCurorderWorkRequest) workRequest).getOrder();
            }
        }
        CourierOrder courierOrder=new CourierOrder("2019", order.getOrderID());
        courierOrder.setFrom("ww");
        courierOrder.setTransportNum(PROPERTIES);
        courierOrderDirectory.addOrder(courierOrder);
        
    }*/
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)AssignWorklist.getModel();
        
        model.setRowCount(0);
        
        
        for(CourierOrder c : courierOrderDirectory.getOrderlist()){
            if (!c.getStatus().equals("Finish")) {
                 Object[] row = new Object[7];
            row[0] = c;
            row[1] = c.getFrom();
            row[2] = c.getTo();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            row[3] =dateFormat.format(c.getOrderDate());
            row[4] = c.getTransportNum();
            row[5] = c.getStatus();
            row[6]=c.getCourierName();
            model.addRow(row);
            }
           
        }
    }
    
     public void populateFinishTable(){
        DefaultTableModel model = (DefaultTableModel)FinshedWorklist.getModel();
        
        model.setRowCount(0);
        
        
        for(CourierOrder c : courierOrderDirectory.getOrderlist()){
            if (c.getStatus().equals("Finish")) {
                 Object[] row = new Object[7];
            row[0] = c;
            row[1] = c.getFrom();
            row[2] = c.getTo();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            row[3] =dateFormat.format(c.getOrderDate());
            row[4] = c.getTransportNum();
            row[5] = c.getStatus();
            row[6]=c.getCourierName();
            model.addRow(row);
            }
           
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        AssignWorklist = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAssign = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        FinshedWorklist = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 237, 237));
        setForeground(new java.awt.Color(255, 102, 204));

        AssignWorklist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OrderNo.", "From", "To", "OrderDate", "TransportNo", "Status", "CurrierNum"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(AssignWorklist);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 204));
        jLabel1.setText("Assign Center");

        btnAssign.setForeground(new java.awt.Color(255, 102, 204));
        btnAssign.setText("Update");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnCancel.setForeground(new java.awt.Color(255, 102, 204));
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        FinshedWorklist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OrderNo.", "From", "To", "OrderDate", "TransportNo", "Status", "CurrierNum"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(FinshedWorklist);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(71, 71, 71)
                            .addComponent(btnCancel))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(188, 188, 188)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(216, 611, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssign)
                    .addComponent(btnCancel))
                .addGap(42, 42, 42)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(172, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        int selectedRow = AssignWorklist.getSelectedRow();
        if (selectedRow >= 0 ){
            CourierOrder c = (CourierOrder) AssignWorklist.getValueAt(selectedRow,0);
            System.out.println(c.getCourierName());
            if (c.getCourierName()!=null) {
                JOptionPane.showMessageDialog(this, "Already have one to ship!");
                return;
            }
            UpdateOrderJPanel panel = new UpdateOrderJPanel(userProcessContainer,c,enterprise,userAccount);
            userProcessContainer.add("UpdateCustomerJPanel",panel);
            CardLayout layout = (CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int selectedRow = AssignWorklist.getSelectedRow();
        WorkRequest selectrequest=new AssignWorkRequest();
        UserAccount uas=new UserAccount();
        if (selectedRow >= 0 ){
            CourierOrder c = (CourierOrder) AssignWorklist.getValueAt(selectedRow, 0);
            for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
                if (request instanceof AssignWorkRequest) {
                    if (((AssignWorkRequest) request).getCurOrder().getOrderNum()==c.getOrderNum()) {
                        selectrequest=request;
                    }
                }
            }
            userAccount.getWorkQueue().getWorkRequestList().remove(selectrequest);
            for (UserAccount ua : enterprise.searchOrganization("Courier Organization").getUserAccountDirectory().getUserAccountList() ) {
                if (ua.getEmployee().getEmployeeName().equals(c.getCourierName())) {
                    uas=ua;
                }
            }
            uas.getWorkQueue().getWorkRequestList().remove(selectrequest);
        } // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AssignWorklist;
    private javax.swing.JTable FinshedWorklist;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
